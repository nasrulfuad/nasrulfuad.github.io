[{"content":"Intro ‚ö° When we create an application in NodeJS, our application runs sequentially, for example there is user A making a request to endpoint /slow and the endpoint is running a very heavy process, so when there is user B hits to the same application but different endpoint e.g / while the process that belongs to A is still running, then user B will wait for user A\u0026rsquo;s process to finish, so in this article we\u0026rsquo;ll learn how to make our NodeJS application run concurrently. ‚ö°‚ö°\nBefore we talk about how to make our nodejs application run concurrently, I think it\u0026rsquo;s good to know the difference between concurrent and parallelism.\nWhat is Concurrency / Concurrent? \u0026ldquo;Concurrent or Concurrency means we can do several jobs one by one at a time.\u0026rdquo;\nFor example, we eat -\u0026gt; drink -\u0026gt; open cellphone -\u0026gt; eat -\u0026gt; drink -\u0026gt; chat. This is an example of a concurrency process, at one time we did one job but WE CAN CHANGE JOBS.\nWhat is Parallelism? \u0026ldquo;Parallelism means doing jobs at the same time.\u0026rdquo;\nFor example, we eat while watching a movie, we cook while on the phone, we walking while looking at cell phone and etc. WE DO SOME JOBS AT THE SAME TIME.\nActually, we don\u0026rsquo;t need to worry about the difference between concurrency and parallel, because when we create a concurrent application, it is usually already with parallel process, we can change jobs and we can also do several jobs at once.\nJump into the code ‚ö°Ô∏è For practice, we use ExpressJS as http server, you can clone from my repository, then install dependencies using npm install or yarn. The project structure is like below.\n. ‚îú‚îÄ‚îÄ node_modules/ ‚îú‚îÄ‚îÄ package.json ‚îú‚îÄ‚îÄ index.js ‚îú‚îÄ‚îÄ my-heavy-process.js ‚îú‚îÄ‚îÄ README.md ‚îî‚îÄ‚îÄ .gitignore Next we will create 2 endpoints, / and /slow\n// index.js const app = require(\u0026#34;express\u0026#34;)(); const { fork } = require(\u0026#34;child_process\u0026#34;); const PORT = 8888; app.get(\u0026#34;/\u0026#34;, function (request, response) { response.send(\u0026#34;This page should be fast\u0026#34;); response.end(); }); app.get(\u0026#34;/slow\u0026#34;, function (request, response) { const fiveBillion = 5_000_000_000; let count = 0; for (let i = 0; i \u0026lt; fiveBillion; i++) { count += i; } response.send(`The final count is : ${count}`); response.end(); }); app.listen(PORT, function () { console.info(`Server is running on port ${PORT}`); }); Run our application with node index.js then open http://localhost:8888/ it will be loaded very fast, because there is no heavy process that need a lot of memory, but if we open /slow endpoint it will be slow because there is a heavy process.\nAnd then what\u0026rsquo;s the problem ?? ü§î\nHmmmm the problem is when we open /slow endpoint and the process is not finished yet but we make another request on / endpoint it will wait for process at endpoint /slow finish. It means our application running in sequential process or FIFO (First In First Out).\nFix the problem Now we update our /slow endpoint to run on concurrent requests,\nFirstly, we fork the my-heavy-process.js file when user trying to call our /slow endpoint, so our heavy process will be processed in file that we forked.\nconst childProcess = fork(\u0026#34;./my-heavy-process.js\u0026#34;); Note : Import fork from child_process module, see second line in index.js file.\nNext we send a data string \u0026ldquo;start\u0026rdquo; to the file we forked.\nchildProcess.send(\u0026#34;start\u0026#34;, function (error) { if (error) { console.error(\u0026#34;Child process error\u0026#34;); console.error(error.message); } }); Next we create a listener to capture incoming data from our child process (my-heavy-process.js) and then we will send it to the client.\nchildProcess.on(\u0026#34;message\u0026#34;, function (data) { response.send(`The final count is : ${data}`); response.end(); }); So, our /slow endpoint will looks like this.\n// index.js app.get(\u0026#34;/slow\u0026#34;, function (request, response) { const childProcess = fork(\u0026#34;./my-heavy-process.js\u0026#34;); // \u0026lt;-- fork child process childProcess.send(\u0026#34;start\u0026#34;, function (error) { if (error) { console.error(\u0026#34;Child process error\u0026#34;); console.error(error.message); } }); childProcess.on(\u0026#34;message\u0026#34;, function (data) { response.send(`The final count is : ${data}`); response.end(); }); }); Now, we will focus in our child process or my-heavy-process.js file, we create a listener to capture the incoming data from /slow endpoint.\n// my-heavy-process.js process.on(\u0026#34;message\u0026#34;, function (data) { // data will process here }); If you remember that /slow endpoint send string \u0026ldquo;start\u0026rdquo; to the child process, so we will first check whether the data is the same as string \u0026ldquo;start\u0026rdquo; or not. If yes, run the heavy process or skip it and send the result to our /slow endpoint then we kill the child process.\n// my-heavy-process.js let count = 0; if (data === \u0026#34;start\u0026#34;) { const tenBillion = 5_000_000_000; for (let i = 0; i \u0026lt; tenBillion; i++) { count += i; } } So, the full code will be like this.\n// my-heavy-process.js process.on(\u0026#34;message\u0026#34;, function (data) { let count = 0; if (data === \u0026#34;start\u0026#34;) { const tenBillion = 5_000_000_000; for (let i = 0; i \u0026lt; tenBillion; i++) { count += i; } } process.send(count); process.exit(); // \u0026lt;-- kill child process }); Now if we restart our application, your / endpoint will not wait for the process on /slow endpoint anymore.\nConclusion For easy to understand that our parent (index.js) send a heavy process to be executed by another (child process). Actually, to solve our problem (sequential process) there are several ways, we can use Clustering, Child Process or Worker Thread, if you want to know more about the difference between them, read here.\nThank you for reading üôÇ\n","permalink":"https://nasrul.dev/posts/nodejs/concurrent-request-in-nodejs/","summary":"We will learn how to make a heavy process to be executed by another process (child process)","title":"Concurrent Request in NodeJs With Child Process"},{"content":"Intro ‚ö° As a software engineer, sometimes when I just re-install my Operating System, I need to setup my development for work, So in this article I will show you how I setup it üòÑ\n1. Update and upgrade your system After you install elementary, the default system is not up to date with all the packages and releases, so here why you need to update your system to the latest version.\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade \u0026amp;\u0026amp; sudo apt dist-upgrade 2. Install GDebi Gdebi is a powerfull software utility for Debian-based and therefore ubuntu based distros which allows users to install .deb package using a graphical interface.\nsudo apt install gdebi 3. Install Multimedia Codecs Do you like watching a movie or listening music?\nHere is multimedia codecs for you if you want an unrestrictive experience while enjoying your movies or music.\nsudo apt install ubuntu-restricted-extras libavcodec-extra libdvd-pkg 4. Install Drivers Windows needs manufacturer-provided hardware drivers before your hardware will work. Linux and other operating systems also need hardware drivers before hardware will work ‚Äî but hardware drivers are handled differently on Linux. \u0026hellip; You may sometimes need to install drivers, but some hardware may just not work at all.\nsudo ubuntu-drivers autoinstall 5. Install Elementary Tweak Do you like customize your operating system? in elementary we can use elementary-tweak for customize.\nsudo apt install software-properties-common \u0026amp;\u0026amp; sudo add-apt-repository ppa:philip.scott/elementary-tweaks \u0026amp;\u0026amp; sudo apt update \u0026amp;\u0026amp; sudo apt install elementary-tweaks 6. Install ULauncher Do you want to fast to access your applications without touching your touchpad or mouse? here is ULauncher was created, Ulauncher is a fast application launcher with extension and shortcut support to help you quickly access application and files in Linux.\nsudo add-apt-repository ppa:agornostal/ulauncher \u0026amp;\u0026amp; sudo apt update \u0026amp;\u0026amp; sudo apt install ulauncher Or if you want to download the .deb file, just go to ULauncher and then install it from your terminal.\nsudo dpkg -i ulaucher-filename.deb 7. Improve Laptop Battery Life To reduce background tasks in your system, I need to install tlp-rdw.\nsudo apt install tlp tlp-rdw \u0026amp;\u0026amp; sudo tlp start 8. Install curl, git and wget curl is used in command lines or scripts to transfer data.\ngit is a version control system designed to handle everything from small to very large projects with speed and efficiency.\ngit is a package for retrieving files using HTTP, HTTPS, FTP and FTPS, the most widely used Internet protocols.\nsudo apt install curl git wget 9. Install NodeJS NodeJS (Node) is a development platform for executing JavaScript code server-side. Node is useful for developing applications that require a persistent connection from the browser to the server and is often used for real-time applications such as chat, news feeds and web push notifications.\n# when this article created, the latest version of node is 16, # So make sure you install the latest version curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt-get install -y nodejs 10. Install Visual Studio Code Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications. Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.\nDownload the .deb file here and then install it via terminal.\nsudo dkpg -i vscode-filename.deb 11. Install Docker and Docker Compose Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker‚Äôs methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. read more here.\nDocker Compose is a tool that was developed to help define and share multi-container applications. With Compose, you can create a YAML file to define the services and with a single command, can spin everything up or tear it all down.\nInstall packages to allow apt to use a repository over HTTPS\nsudo apt-get install ca-certificates gnupg lsb-release Add Docker‚Äôs official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Set up the stable repository\necho \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null Install Docker Engine\nsudo apt-get install docker-ce docker-ce-cli containerd.io Install Docker Compose\n# To install a different version of Compose, substitute 1.29.2 with the version of Compose you want to use. sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose Apply executable permissions to the binary\nsudo chmod +x /usr/local/bin/docker-compose Manage docker as a non root user\n# Create the docker group sudo groupadd docker # Add your user to the docker group sudo usermod -aG docker $USER Log out and log back in so that your group membership is re-evaluated\n# Activate the changes to groups newgrp docker # Verify that you can run docker commands without sudo docker run hello-world 12. Install Snapcraft Snaps are app packages for desktop, cloud and IoT that are easy to install, secure, cross‚Äêplatform and dependency‚Äêfree.\nsudo apt install snapd 13. Install Postman Postman is a complete API development platform that helps you manage your APIs in every stage of development, from designing and testing, to publishing API documentation and monitoring.\nInstall postman via snap, make sure you have installed snapcraft\nsudo snap install postman 14. Install Telegram Telegram is a messaging app with a focus on speed and security, it\u0026rsquo;s super-fast, simple and free. You can use Telegram on all your devices at the same time ‚Äî your messages sync seamlessly across any number of your phones, tablets or computers.\nsudo add-apt-repository ppa:atareao/telegram \u0026amp;\u0026amp; sudo apt update \u0026amp;\u0026amp; sudo apt install telegram 15. Install VLC Media Player VLC is multimedia player and framework that plays most multimedia files, and various streaming protocols.\nsudo apt install vlc 16. Install Chromium and Firefox I use 2 web browsers, firefox for work and chromium just for surfing, if you won\u0026rsquo;t to install both just remove firefox or chromium-browser.\nsudo apt-get install chromium-browser firefox 17. Remove some default apps When I use elementary, I have change the apps like Epiphany Browser with Firefox or Chromium, plank with ULauncher.\nRemove epiphany-browser\nsudo apt-get remove epiphany-browser \u0026amp;\u0026amp; sudo apt-get purge epiphany-browser Remove plank\nsudo apt remove plank \u0026amp;\u0026amp; sudo apt-get purge plank 18. System Cleanup üèÅ After you remove some apps, the data maybe still in your disk, to remove it just :\n# You can clean partial packages using a command sudo apt-get autoclean \u0026amp;\u0026amp; # You can auto cleanup apt-cache sudo apt-get clean \u0026amp;\u0026amp; # You can clean up of any unused dependencies sudo apt-get autoremove ","permalink":"https://nasrul.dev/posts/linux/18-things-i-do-after-install-elementary/","summary":"In this article I will show you how I setup my Operating System for daily work as Software Engineer","title":"18 Things I Do After Install Elementary"},{"content":"June 2022 ‚Äì Present\nTelkom Indonesia Backend Engineer\nDeveloping and maintain software application with million of users. Responsible for developing new feature. Working with team and has a role as Optimation Engineer. Working with Jira as task management. Tech stack : NodeJS, Microservices, PostgreSQL, Git. June 2021 ‚Äì June 2022\nPT. Qodrbee Berinovasi Backend Engineer\nHandle website and software application designing, building, or maintaining. Evaluate code to ensure it meets industry standards, is valid, is properly structured, and is compatible with browsers, devices, or operating systems. Report directly to the Project Manager. Determine user needs by analyzing technical requirements. Working with Docker for development and production. Implemented a Service Layer, Observable and other design patterns. Tech stack : NodeJS, Typescript, NestJS, Postgresql, Prisma, BullJS and Docker. February 2020 - Desember 2020\nPT. Bintang Trans Khatulistiwa Fullstack Engineer\nMaintenance of an existing web ecommerce. Develop a catalog web app. Designing a database for understanding how the data flows. Back up files from Web sites to local directories for recovery. Tech stack : Laravel, MySql, Bootstrap. February 2019 ‚Äì April 2019\nDlingo Digital Valley Frontend Engineer\nDevelop a company web pages. Handle website and software application designing, building, or maintaining. Direct or perform website updates. Tech stack : Javascript, JQuery, Bootstrap. August 2018 - March 2022\nQuality Muslim Coder (qodr.or.id) Senior Web Developer\nDeveloped a web registration for new members and many study cases I\u0026rsquo;ve worked on. Experienced as a leader and responsible in IT division. Mentored new members and teached them the basics of programming. Maintain an understanding of the latest Web applications and programming practices through education, study, and participation in conferences, workshops, and groups. Teamwork, leadership, communication, planning and time management. Tech stack I\u0026rsquo;ve learned : Linux, NodeJS, ReactJS. VueJS, NextJS, Redux, Javascript, Typescript, PHP, Laravel, HTML, CSS (SCSS/SASS), MySQL, PostgreSQL, MongoDB, Web Server, Docker, Microservices. ","permalink":"https://nasrul.dev/experiences/","summary":"\u003ch1 id=\"lets-work-together-br--on-your-next-project\"\u003eLet\u0026rsquo;s work together \u003cbr /\u003e on your next project.\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003ewrite to : \u003ca href=\"mailto:hi@nasrul.dev\"\u003ehi@nasrul.dev\u003c/a\u003e","title":"Experiences üî•"},{"content":"Web Technologies GraphQL / Websocket / Git / Web Server\nFrameworks \u0026amp; Libraries NestJS / ReactJS / VueJS / NextJS / Redux / FabricJS / Ant Design\nDatabases MySQL / PostgreSQL / MongoDB\nProgramming Languages Typescript / Javascript / PHP / Java\nWanted Spring Boot / Kafka\nOthers Redis / NodeJS / SQL / Prisma ORM / Docker / Microservices\n","permalink":"https://nasrul.dev/skills/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eIt‚Äôs never too late to be what you might have been\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n","title":"Skills üöÄ"}]